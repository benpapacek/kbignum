//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/benpapacek/Dev/kbignum/script/../kbignum-java/src/main/java/com/papacekb/kbignum/JBigInteger.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComPapacekbKbignumJBigInteger")
#ifdef RESTRICT_ComPapacekbKbignumJBigInteger
#define INCLUDE_ALL_ComPapacekbKbignumJBigInteger 0
#else
#define INCLUDE_ALL_ComPapacekbKbignumJBigInteger 1
#endif
#undef RESTRICT_ComPapacekbKbignumJBigInteger

#if !defined (ComPapacekbKbignumJBigInteger_) && (INCLUDE_ALL_ComPapacekbKbignumJBigInteger || defined(INCLUDE_ComPapacekbKbignumJBigInteger))
#define ComPapacekbKbignumJBigInteger_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class ComPapacekbKbignumJByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;

@interface ComPapacekbKbignumJBigInteger : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype)initWithLong:(jlong)value;

- (instancetype)initWithNSString:(NSString *)value;

- (ComPapacekbKbignumJBigInteger *)abs;

- (ComPapacekbKbignumJBigInteger *)addWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)and__WithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)andNotWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (jint)bitCount;

- (jint)bitLength;

- (ComPapacekbKbignumJBigInteger *)clearBitWithInt:(jint)n;

- (jint)compareToWithId:(ComPapacekbKbignumJBigInteger *)other;

- (ComPapacekbKbignumJBigInteger *)divideWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (IOSObjectArray *)divideAndRemainderWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (jdouble)doubleValue;

- (jboolean)isEqual:(id)o;

- (jboolean)equalsImplWithId:(id)o;

- (ComPapacekbKbignumJBigInteger *)flipBitWithInt:(jint)n;

- (jfloat)floatValue;

- (ComPapacekbKbignumJBigInteger *)gcdWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (jint)getLowestSetBit;

- (NSUInteger)hash;

- (jint)hashCodeImpl;

- (jint)intValue;

- (jboolean)isProbablePrimeWithInt:(jint)certainty;

- (jlong)longValue;

- (ComPapacekbKbignumJBigInteger *)maxWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)minWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)modWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)modInverseWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)modPowWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)exp
                                         withComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)m;

- (ComPapacekbKbignumJBigInteger *)multiplyWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)negate;

- (ComPapacekbKbignumJBigInteger *)nextProbablePrime;

- (ComPapacekbKbignumJBigInteger *)not__;

- (ComPapacekbKbignumJBigInteger *)or__WithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)powWithInt:(jint)exp;

+ (ComPapacekbKbignumJBigInteger *)probablePrimeWithInt:(jint)bitLength;

- (ComPapacekbKbignumJBigInteger *)remainderWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (ComPapacekbKbignumJBigInteger *)setBitWithInt:(jint)n;

- (ComPapacekbKbignumJBigInteger *)shiftLeftWithInt:(jint)n;

- (ComPapacekbKbignumJBigInteger *)shiftRightWithInt:(jint)n;

- (jint)signum;

- (ComPapacekbKbignumJBigInteger *)subtractWithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

- (jboolean)testBitWithInt:(jint)n;

- (ComPapacekbKbignumJByteArray *)toByteArray;

- (NSString *)description;

- (NSString *)toStringImpl;

- (NSString *)toStringImplWithInt:(jint)radix;

- (ComPapacekbKbignumJBigInteger *)xor__WithComPapacekbKbignumJBigInteger:(ComPapacekbKbignumJBigInteger *)n;

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)delegate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComPapacekbKbignumJBigInteger)

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *ComPapacekbKbignumJBigInteger_probablePrimeWithInt_(jint bitLength);

FOUNDATION_EXPORT void ComPapacekbKbignumJBigInteger_initWithJavaMathBigInteger_(ComPapacekbKbignumJBigInteger *self, JavaMathBigInteger *delegate);

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *new_ComPapacekbKbignumJBigInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *create_ComPapacekbKbignumJBigInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *delegate);

FOUNDATION_EXPORT void ComPapacekbKbignumJBigInteger_initWithNSString_(ComPapacekbKbignumJBigInteger *self, NSString *value);

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *new_ComPapacekbKbignumJBigInteger_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *create_ComPapacekbKbignumJBigInteger_initWithNSString_(NSString *value);

FOUNDATION_EXPORT void ComPapacekbKbignumJBigInteger_initWithLong_(ComPapacekbKbignumJBigInteger *self, jlong value);

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *new_ComPapacekbKbignumJBigInteger_initWithLong_(jlong value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComPapacekbKbignumJBigInteger *create_ComPapacekbKbignumJBigInteger_initWithLong_(jlong value);

J2OBJC_TYPE_LITERAL_HEADER(ComPapacekbKbignumJBigInteger)

#endif

#pragma pop_macro("INCLUDE_ALL_ComPapacekbKbignumJBigInteger")
